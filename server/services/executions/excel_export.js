'use strict';

const axios = require('axios');
const log = require('../../logger');
const funcs = require('../../funcs');
const excel = require('exceljs');
const config = require('../../config'); 

function getFilterList(filters){
    delete filters.format;

    let filterUseString = '';

    for (let [key, value] of Object.entries(filters)) {
        if(value !== undefined){
            filterUseString +=`${(key.toUpperCase()).replace('_',' ')}= ${value}, `
        }
    }

    return filterUseString;
}

function getExcelWorkbook(executions, filters) {
    let workBook = new excel.Workbook();
    
    let workSheet = workBook.addWorksheet("Execution Report");
    workSheet.properties.defaultColWidth = 35;
    
    
    let filtersList = getFilterList(filters);

    //COLUMN BORDER STYLE
    let borderStyle = {border:{top:{style:'thin'},left:{style:'thin'},bottom:{style:'thin'},right:{style:'thin'}},alignment:{wrapText:true}}
    
    // FORMAT FIRST ROW
    workSheet.mergeCells('A1:P1');
    workSheet.getCell('A1').value = `Execution Report generated by ${config.ING_SERVER} at ${new Date()} ${filtersList.length ? '\r\n Using Filters: ' + filtersList : ''} `;
    workSheet.getCell('A1').alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };
    workSheet.getRow(1).height = 60;

    // FORMAT SECOND ROW
    workSheet.mergeCells('A2:L2');
    workSheet.getCell('A2').value = `Execution Information`;
    workSheet.getCell('A2').alignment = { vertical: 'middle', horizontal: 'center' };

    workSheet.mergeCells('M2:P2');
    workSheet.getCell('M2').value = `Step Summary`;
    workSheet.getCell('M2').alignment = { vertical: 'middle', horizontal: 'center' };

    workSheet.addTable({
        name:'ExecutionReportTable',
        ref:'A3',
        style: {
            theme: 'TableStyleLight1'
        },
        columns: [
            {name: 'Execution ID', filterButton: true, style: borderStyle},
            {name: 'Venue', filterButton: true, style: borderStyle},
            {name: 'Description', filterButton: true, style: borderStyle},
            {name: 'Conductors', filterButton: true, style: borderStyle},
            {name: 'Run for Record', filterButton: true, style: borderStyle},
            {name: 'Procedure ID(s)', filterButton: true, style: borderStyle},
            {name: 'Institutional ID(s)/Revision(s)', filterButton: true, style: borderStyle},
            {name: 'Comments (Unresolved/Total)', filterButton: true, style: borderStyle},
            {name: 'Time Started', filterButton: true, style: borderStyle},
            {name: 'Time Completed', filterButton: true, style: borderStyle},
            {name: 'Status', filterButton: true, style: borderStyle},
            {name: 'flight_dictionary_version', filterButton: true, style: borderStyle},
            {name: 'sse_dictionary_version', filterButton: true, style: borderStyle},
            {name: 'Executed', filterButton: true, style: borderStyle},
            {name: 'Passed', filterButton: true, style: borderStyle},
            {name: 'Failed', filterButton: true, style: borderStyle},
            {name: 'Errors', filterButton:true, style: borderStyle}
        ],
        rows:[]
    });

    let table = workSheet.getTable('ExecutionReportTable');
    //EMPTY TABLE WITH NO ROWS GIVES ERROR ON EXCEL FILE
    if(executions.length){
        executions.forEach(execution => {
            table.addRow([
                execution.execution_id, 
                execution.venue_name, 
                execution.description, 
                execution.test_conductors.map(test_conductor => test_conductor).join('\r\n'), 
                execution.run_for_score,
                execution.used_procedures.map(user_procedure => `${user_procedure.procedure_id} ${user_procedure.procedure_id && user_procedure.version>=0 ? ',': ''} ver.${user_procedure.version}`).join('\r\n'),
                execution.used_procedures.map(user_procedure => `${user_procedure.institutional_id} ${user_procedure.institutional_id && user_procedure.institutional_release_id ? ',': ''} ${user_procedure.institutional_release_id}`).join('\r\n'),
                `${execution.unresolved_conversations_count} / ${execution.conversations_count}`,
                execution.time_started, 
                execution.time_completed, 
                execution.status, 
                execution.flight_dictionary_version, 
                execution.sse_dictionary_version,
                execution.num_steps_executed, 
                execution.num_steps_failed, 
                execution.num_steps_passed, 
                execution.num_steps_errored
            ])
        })
    } else {
        table.addRow(['','','','','','','','','','','','','','','',''])
    }
    
    // commit the table changes into the sheet
    table.commit();

    return workBook;
}

module.exports.executions_report = async function executions_report(core_api_url, options, authorization_header) {
    
    log.debug('Getting all execution from core server');
    
    const headers = {Authorization: authorization_header};
    const params = options;

    //GET DATA FROM CORE API
    let executions = null;
    try {
        let url = `${core_api_url}executions`;
        let response = await axios.get(url, {headers: headers, params: params});
        executions = response.data;
    } catch (err) {
        return Promise.reject(funcs.transform_axios_error(err));
    }

    //LOG USER ASKING FOR INFORMATION
    let user_name = '';
    try {
        user_name = funcs.parse_username(authorization_header);
    } catch (err) {
        log.warning(`failed to get user_name. err: ${err}`);    
    }  

    let log_entry = {
        'user_name': user_name,
        'service': 'report_server'
      };
    log.debug('Generate excel for execution', log_entry); 


    //GET EXCEL WORKBOOK
    let excel_workbook = null;
    let excel_workbook_buffer = null;
    try {
        excel_workbook = getExcelWorkbook(executions, options);
        excel_workbook_buffer = await excel_workbook.xlsx.writeBuffer();
    }
    catch(err) {
        log.warning(`failed to get excel workbook. err: ${err}`);    
    }

    return excel_workbook_buffer;
}


