'use strict';

const axios = require('axios');
const log = require('../../logger');
const funcs = require('../../funcs');
const excel = require('exceljs');
const config = require('../../config'); 

function getOptionsList(options){
    delete options.format;
    options.queryBuilderParams = JSON.stringify(options.queryBuilderParams);
    let optionsString = '';

    for (let [key, value] of Object.entries(options)) {
        if(value !== undefined){
            optionsString +=`${(key.toUpperCase()).replace('_',' ')}= ${value}, `
        }
    }

    return optionsString;
}

function generateExcelWorkbook(search_results, options) {
    let workBook = new excel.Workbook();
    
    let workSheet = workBook.addWorksheet("Search Report");
    workSheet.properties.defaultColWidth = 35;
    
    
    let optionsList = getOptionsList(options);

    //COLUMN BORDER STYLE
    let borderStyle = {border:{top:{style:'thin'},left:{style:'thin'},bottom:{style:'thin'},right:{style:'thin'}},alignment:{wrapText:true}}
    
    // FORMAT FIRST ROW
    workSheet.mergeCells('A1:L1');
    workSheet.getCell('A1').value = `Search Report generated by ${config.ING_SERVER} at ${new Date()} ${optionsList.length ? '\r\n Using Options: ' + optionsList : ''} `;
    workSheet.getCell('A1').alignment = { vertical: 'middle', horizontal: 'center', wrapText: true };
    workSheet.getRow(1).height = 60;

    // FORMAT SECOND ROW
    workSheet.mergeCells('A2:L2');
    workSheet.getCell('A2').value = `Search Results`;
    workSheet.getCell('A2').alignment = { vertical: 'middle', horizontal: 'center' };

    workSheet.addTable({
        name:'SearchReportTable',
        ref:'A3',
        style: {
            theme: 'TableStyleLight1'
        },
        columns: [
            {name: 'Step Number', filterButton: true, style: borderStyle},
            {name: 'Step Title', filterButton: true, style: borderStyle},
            {name: 'Step Description', filterButton: true, style: borderStyle},
            {name: 'Step Type', filterButton: true, style: borderStyle},
            {name: 'Venue', filterButton: true, style: borderStyle},
            {name: 'Source Procedure ID', filterButton: true, style: borderStyle},
            {name: 'Source Execution ID', filterButton: true, style: borderStyle},
            {name: 'Start Time (UTC)', filterButton: true, style: borderStyle},
            {name: 'End Time (UTC)', filterButton: true, style: borderStyle},
            {name: 'Test Conductor', filterButton: true, style: borderStyle},
            {name: 'Author', filterButton: true, style: borderStyle},
            {name: 'Tag', filterButton: true, style: borderStyle},
        ],
        rows:[]
    });

    let table = workSheet.getTable('SearchReportTable');
    
    //EMPTY TABLE WITH NO ROWS GIVES ERROR ON EXCEL FILE
    if(search_results.length){
        for (const search_result of search_results) {
            table.addRow([
                search_result.number, 
                search_result.title, 
                search_result.description, 
                search_result.step_type ? search_result.step_type : search_result.elem_type,
                search_result.executionDetails ? search_result.executionDetails.venue_name : '',
                `${search_result.procedure_id}v${search_result.procedureVersionDetails.version}`,
                search_result.execution_id ? `${search_result.execution_id} ${search_result.runRecordDetails._to ? ' (Previous Run)' : ''}`: '',
                getStartTime(search_result),
                getEndTime(search_result),
                getTestConductor(search_result),
                getAuthor(search_result),
                getTagNameStr(search_result)
            ])
        }
    } else {
        table.addRow(['','','','','','','','','','','',''])
    }
    
    // commit the table changes into the sheet
    table.commit();

    return workBook;
}

function getStartTime(data) {
    if (data.execution && data.execution.meta_data && data.execution.meta_data.time_started && data.execution.meta_data.time_started !== null) {
        return data.execution.meta_data.time_started;
    }
    return '';
}

function getEndTime(data) {
    if (data.execution && data.execution.meta_data && data.execution.meta_data.time_completed && data.execution.meta_data.time_completed !== null) {
        return data.execution.meta_data.time_completed;
    }
    return '';
}

function getAuthor(data) {
    if (data.procedureDetails && data.procedureDetails.author) {
        return data.procedureDetails.author;
    }
    return '';
}

function getTestConductor(data) {
    if (data.execution && data.execution.meta_data && data.execution.meta_data.test_conductor) {
        return data.execution.meta_data.test_conductor;
    }
    else if(data.executionDetails && data.executionDetails.test_conductors) {
        return data.executionDetails.test_conductors.join(', ');
    }
    return '';
}

function getTagNameStr(data) {
    if (data.tag_ids.length > 0) {
        const ids =  data.tag_ids;
        const tagName = ids.map(id => {
            const matchedTag = data.procedureVersionDetails.tags.find(tag => id === tag.tag_id);
            return matchedTag ? matchedTag.name : null;
        }).filter(tagName => tagName !== null);
        return tagName.join(', ');
    }
    return '';
}

module.exports.search_report = async function search_report(search_api_url, options, authorization_header) {
    
    log.debug('Getting Search Result from search service');
    
    const headers = {Authorization: authorization_header};
    let payload = options;
    payload.limit = 10;
    payload.offset = 0;

    //GET DATA FROM CORE API
    let search_results = [];
    try {
        let url = `${search_api_url}search`;
        while(true) {
            console.log(payload);
            const response = await axios.post(url, payload, {headers: headers});
            search_results.push(...response.data.results)
            if (payload.offset >= response.data.total ) {
                break;
            }
            payload.offset += payload.limit;
            
        }
    } catch (err) {
        return Promise.reject(funcs.transform_axios_error(err));
    }

    //LOG USER ASKING FOR INFORMATION
    let user_name = '';
    try {
        user_name = funcs.parse_username(authorization_header);
    } catch (err) {
        log.warning(`failed to get user_name. err: ${err}`);    
    }  

    let log_entry = {
        'user_name': user_name,
        'service': 'report_server'
      };
    log.debug('Generate excel for execution', log_entry); 


    //GET EXCEL WORKBOOK
    let excel_workbook = null;
    let excel_workbook_buffer = null;
    try {
        excel_workbook = generateExcelWorkbook(search_results, options);
        excel_workbook_buffer = await excel_workbook.xlsx.writeBuffer();
    }
    catch(err) {
        log.warning(`failed to get excel workbook. err: ${err}`);    
    }

    return excel_workbook_buffer;
}


